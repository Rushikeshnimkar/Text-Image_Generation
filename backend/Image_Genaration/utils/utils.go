package utils

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/joho/godotenv"
)

type ChatGptInput struct {
	// Model  string `json:"model"`
	Prompt string `json:"prompt"`
	N      int    `json:"n"`
	Size   string `json:"size"`
}

// GenerateImage generates an image based on the provided prompt using ChatGPT API
func GenerateImage(prompt string) (string, error) {
	// Load environment variables from .env file
	err := godotenv.Load()
	if err != nil {
		return "", err
	}

	// Get OpenAI API key from environment variable
	apiKey := os.Getenv("OPENAI_KEY")
	if apiKey == "" {
		return "", errors.New("OPENAI_KEY not found in environment variables")
	}

	// Create the request data
	requestData := ChatGptInput{
		// Model:  "dall-e-3",
		Prompt: prompt,
		N:      1,
		Size:   "1024x1024",
	}

	// Marshal the request data to JSON
	requestBody, err := json.Marshal(requestData)
	if err != nil {
		return "", err
	}

	// Create HTTP POST request to ChatGPT API for image generation
	url := "https://api.openai.com/v1/images/generations"
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(requestBody))
	if err != nil {
		return "", err
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+apiKey)

	// Create HTTP client
	client := &http.Client{}

	// Send request
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Read response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	// bd, _ := req.GetBody()
	// fmt.Println(bd.)
	// Check response status code
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("non-OK status code received: %s", resp.Status, resp.StatusCode)
	}

	// Extract the image URL from the response
	var responseData AutoGenerated
	// var responseData = make(map[string]interface{})

	err = json.Unmarshal(body, &responseData)
	if err != nil {
		return "", err
	}

	fmt.Printf("%+v\n", &responseData)

	// imageURL, _ := responseData["url"].(string)
	if responseData.Data[0].URL == "" {
		return "", errors.New("image URL not found in response")
	} else {
		return responseData.Data[0].URL, nil
	}

	// return imageURL, nil
}

type AutoGenerated struct {
	Created int `json:"created"`
	Data    []struct {
		RevisedPrompt string `json:"revised_prompt"`
		URL           string `json:"url"`
	} `json:"data"`
}
